[Pair { rule: content, span: Span { str: "using System.Generic;\r\n\r\nnamespace ns.dummy\r\n{\r\n    public abstract class Outer\r\n    {\r\n        class Inner\r\n        {\r\n            private enum Tags\r\n            {\r\n                First,\r\n                Second,\r\n                Third,\r\n                Fourth,\r\n                Last\r\n            }\r\n\r\n            #region #func Inner\r\n            public readonly int field;\r\n            public readonly Pair<string, double> field;\r\n            private readonly Tags tag;\r\n\r\n            #region #generated\r\n            //...\r\n            #endregion\r\n            #endregion\r\n        }\r\n\r\n        internal enum Tags\r\n        {\r\n            First,\r\n            Second,\r\n            /*\r\n            Third,\r\n            Fourth, */\r\n            Last\r\n        }\r\n\r\n        #region func# Outer\r\n        public readonly int field = 0;\r\n        public readonly Pair<string, int> field = new Pair<string, int>(String.Empty, 0);\r\n        private readonly Tags tag;    //hello\r\n        #endregion\r\n\r\n        ///docu\r\n        public R ExistingFunc<R>(string[] params, int param, Func<T, R> fun)\r\n        {\r\n\r\n            return fun();\r\n        }\r\n    }\r\n\r\n}", start: 0, end: 1143 }, inner: [Pair { rule: region, span: Span { str: "#func Inner\r\n            public readonly int field;\r\n            public readonly Pair<string, double> field;\r\n            private readonly Tags tag;\r\n\r\n            #region #generated\r\n            //...\r\n            #endregion", start: 323, end: 548 }, inner: [Pair { rule: region_name, span: Span { str: "#func Inner", start: 323, end: 334 }, inner: [] }, Pair { rule: content, span: Span { str: "public readonly int field;\r\n            public readonly Pair<string, double> field;\r\n            private readonly Tags tag;\r\n\r\n            #region #generated\r\n            //...\r\n            #endregion", start: 348, end: 548 }, inner: [Pair { rule: gen_response, span: Span { str: "#generated\r\n            //...\r\n            ", start: 495, end: 538 }, inner: [Pair { rule: COMMENT, span: Span { str: "//...\r\n", start: 519, end: 526 }, inner: [] }, Pair { rule: content, span: Span { str: "", start: 538, end: 538 }, inner: [] }] }] }] }, Pair { rule: COMMENT, span: Span { str: "/*\r\n            Third,\r\n            Fourth, */", start: 679, end: 725 }, inner: [] }, Pair { rule: gen_request, span: Span { str: "func# Outer\r\n        public readonly int field = 0;\r\n        public readonly Pair<string, int> field = new Pair<string, int>(String.Empty, 0);\r\n        private readonly Tags tag;    //hello\r\n        ", start: 774, end: 973 }, inner: [Pair { rule: identifier, span: Span { str: "Outer", start: 780, end: 785 }, inner: [] }, Pair { rule: field_declaration, span: Span { str: "public readonly int field = 0;", start: 795, end: 825 }, inner: [Pair { rule: accessibility_decorator, span: Span { str: "public", start: 795, end: 801 }, inner: [] }, Pair { rule: const_decorator, span: Span { str: "readonly", start: 802, end: 810 }, inner: [] }, Pair { rule: var_declaration, span: Span { str: "int field = 0", start: 811, end: 824 }, inner: [Pair { rule: type_reference, span: Span { str: "int ", start: 811, end: 815 }, inner: [Pair { rule: type_name, span: Span { str: "int", start: 811, end: 814 }, inner: [] }] }, Pair { rule: identifier, span: Span { str: "field", start: 815, end: 820 }, inner: [] }, Pair { rule: expression, span: Span { str: "0", start: 823, end: 824 }, inner: [] }] }, Pair { rule: semicolon, span: Span { str: ";", start: 824, end: 825 }, inner: [] }] }, Pair { rule: field_declaration, span: Span { str: "public readonly Pair<string, int> field = new Pair<string, int>(String.Empty, 0);", start: 835, end: 916 }, inner: [Pair { rule: accessibility_decorator, span: Span { str: "public", start: 835, end: 841 }, inner: [] }, Pair { rule: const_decorator, span: Span { str: "readonly", start: 842, end: 850 }, inner: [] }, Pair { rule: var_declaration, span: Span { str: "Pair<string, int> field = new Pair<string, int>(String.Empty, 0)", start: 851, end: 915 }, inner: [Pair { rule: type_reference, span: Span { str: "Pair<string, int>", start: 851, end: 868 }, inner: [Pair { rule: type_name, span: Span { str: "Pair", start: 851, end: 855 }, inner: [] }, Pair { rule: type_reference, span: Span { str: "string", start: 856, end: 862 }, inner: [Pair { rule: type_name, span: Span { str: "string", start: 856, end: 862 }, inner: [] }] }, Pair { rule: type_reference, span: Span { str: "int", start: 864, end: 867 }, inner: [Pair { rule: type_name, span: Span { str: "int", start: 864, end: 867 }, inner: [] }] }] }, Pair { rule: identifier, span: Span { str: "field", start: 869, end: 874 }, inner: [] }, Pair { rule: expression, span: Span { str: "new Pair<string, int>(String.Empty, 0)", start: 877, end: 915 }, inner: [] }] }, Pair { rule: semicolon, span: Span { str: ";", start: 915, end: 916 }, inner: [] }] }, Pair { rule: field_declaration, span: Span { str: "private readonly Tags tag;", start: 926, end: 952 }, inner: [Pair { rule: accessibility_decorator, span: Span { str: "private", start: 926, end: 933 }, inner: [] }, Pair { rule: const_decorator, span: Span { str: "readonly", start: 934, end: 942 }, inner: [] }, Pair { rule: var_declaration, span: Span { str: "Tags tag", start: 943, end: 951 }, inner: [Pair { rule: type_reference, span: Span { str: "Tags ", start: 943, end: 948 }, inner: [Pair { rule: type_name, span: Span { str: "Tags", start: 943, end: 947 }, inner: [] }] }, Pair { rule: identifier, span: Span { str: "tag", start: 948, end: 951 }, inner: [] }] }, Pair { rule: semicolon, span: Span { str: ";", start: 951, end: 952 }, inner: [] }] }, Pair { rule: COMMENT, span: Span { str: "//hello\r\n", start: 956, end: 965 }, inner: [] }] }, Pair { rule: COMMENT, span: Span { str: "///docu\r\n", start: 995, end: 1004 }, inner: [] }] }, Pair { rule: EOI, span: Span { str: "", start: 1143, end: 1143 }, inner: [] }]
